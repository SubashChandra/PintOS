-> 1. Understanding PintOS

*Resources:

http://web.stanford.edu/class/cs140/projects/pintos/pintos_1.html#SEC1
https://pintosiiith.wordpress.com/category/pintos/

----------------------------------
*Directory Structure

----we'l be modifying----
src/threads -> source code for base kernel, which we'l be modifying

----using---
src/tests/ -> tests for project

---others---
-src/filesys -> source code for basic file system
-src/devices -> source code for i/o devices interfacing
-src/lib -> an implementation of a subset of standard c library
-src/utils -> 

-------------------------------------
*Building PintOS

- cd into threads
- make (this will create a build directory under threads, populate it with a "makefile", a few subdirectories and then build the kernel inside)

------------------------------------
*"Build" Directory Contents (/src/threads/build)

-Makefile -> a copy of "pintos/src/Makefile.build"
-kernel.o -> object file for entire kernel (result of linking object files compiled from each individual kernel source file into a single obj file) ??????
-kernel.bin -> memory image of the kernel, ie the exact bytes loaded into memory to run the pintOS kernel.This is jst kernel.o with debug info stripped off
-loader.bin -> Memory image for the kernel loader, a small chunk of code written in assembly language that reads the kernel from disk into memory and starts it up

subdirectories has

-.o files -> object files
-.d files -> dependency files tell make which source files need to be recompiled when some src or header files are changed


*********************************************
-> 2. Add File to PintOS Kernel

look at the following files and try to understand the working of test files already present 

src/tests/threads/tests.c
src/tests/threads/tests.h

add ur hello.c file in src/tests/threads

-----------------

#include <stdio.h>
#include "tests/threads/tests.h"
#include "threads/malloc.h"
#include "threads/synch.h"
#include "threads/thread.h"
#include "devices/timer.h"

void hello_func(void)
{
	printf("************Hello Pintos********************\n");
}

--------------------

add "extern test_func hello_func;" to tests.h
add "{"hello",hello_func}," in struct test tests[] in tests.c //hello is the test name nd hello_func is the function invoked on it

//add below 2 changes to Make.tests
add "hello" test name to tests/threads_TESTS 
add "tests/threads_SRC = tests/threads/hello.c" right after #Sources for tests comment

---------------------
now head to src/threads

- make
- pintos run hello

*****************************************************
-> 3. Implementation of thread sleep mechanism

obj -> understand the thread sleep mechanism of pintos and provide an efficinent solution to circumvent busy waiting

look at file src/devices/timer.c


--------------------------------------------------------------------
Understanding existing thread mechanism

Main pintos data structure for threads is "struct thread" declared in threads/thread.h

____________________________
## useful code in thread.h
____________________________

 /* States in a thread's life cycle. */
  enum thread_status
    {
      THREAD_RUNNING,     /* Running thread. */
      THREAD_READY,       /* Not running but ready to run. */
      THREAD_BLOCKED,     /* Waiting for an event to trigger. */
      THREAD_DYING        /* About to be destroyed. */
    };
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Thread State: THREAD_RUNNING
    The thread is running. Exactly one thread is running at a given time. thread_current() returns the running thread. 

Thread State: THREAD_READY
    The thread is ready to run, but it's not running right now. The thread could be selected to run the next time the scheduler is invoked. Ready threads are kept in a doubly linked list called ready_list. 

Thread State: THREAD_BLOCKED
    The thread is waiting for something, e.g. a lock to become available, an interrupt to be invoked. The thread won't be scheduled again until it transitions to the THREAD_READY state with a call to thread_unblock(). This is most conveniently done indirectly, using one of the Pintos synchronization primitives that block and unblock threads automatically (see section A.3 Synchronization).

    There is no clear way to tell what a blocked thread is waiting for, but a backtrace can help (see section E.4 Backtraces).

Thread State: THREAD_DYING
    The thread will be destroyed by the scheduler after switching to the next thread. 

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  /* Thread priorities. */
  #define PRI_MIN 0                       /* Lowest priority. */
  #define PRI_DEFAULT 31                  /* Default priority. */
  #define PRI_MAX 63                      /* Highest priority. */

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Member of struct thread: int priority
    A thread priority, ranging from PRI_MIN (0) to PRI_MAX (63). Lower numbers correspond to lower priorities, so that priority 0 is the lowest priority and priority 63 is the highest. 

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


--
only a thread in the ready state is on the run queue, whereas only a thread in the blocked state is on a semaphore wait list. */
--

~~~~~~~~~~~~~~~~~~~~~~~~~~
struct thread
  {
    /* Owned by thread.c. */
    tid_t tid;                          /* Thread identifier. */
    enum thread_status status;          /* Thread state. */
    char name[16];                      /* Name (for debugging purposes). */
    uint8_t *stack;                     /* Saved stack pointer. */
    int priority;                       /* Priority. */
    struct list_elem allelem;           /* List element for all threads list. */

    /* Shared between thread.c and synch.c. */
    struct list_elem elem;              /* List element. */

#ifdef USERPROG
    /* Owned by userprog/process.c. */
    uint32_t *pagedir;                  /* Page directory. */
#endif

    /* Owned by thread.c. */
    unsigned magic;                     /* Detects stack overflow. */
  };
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Member of struct thread: struct list_elem elem
    A "list element" used to put the thread into doubly linked lists, either ready_list (the list of threads ready to run) or a list of threads waiting on a semaphore in sema_down(). It can do double duty because a thread waiting on a semaphore is not ready, and vice versa. 

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
_______________________________
## useful functions in thread.c
_______________________________

-> Thread Switching

schedule() is responsible for switching threads. It is internal to "threads/thread.c" and called only by the three public thread functions that need to switch threads: thread_block(), thread_exit(), and thread_yield(). Before any of these functions call schedule(), they disable interrupts (or ensure that they are already disabled) and then change the running thread's state to something other than running. 

static void
schedule (void) 
{
  struct thread *cur = running_thread ();
  struct thread *next = next_thread_to_run ();
  struct thread *prev = NULL;

  ASSERT (intr_get_level () == INTR_OFF);
  ASSERT (cur->status != THREAD_RUNNING);
  ASSERT (is_thread (next));

  if (cur != next)
    prev = switch_threads (cur, next);
  thread_schedule_tail (prev);
}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
switch_threads() is an assembly language routine in "threads/switch.S". It saves registers on the stack, saves the CPU's current stack pointer in the current struct thread's stack member, restores the new thread's stack into the CPU's stack pointer, restores registers from the stack, and returns.


The rest of the scheduler is implemented in thread_schedule_tail(). It marks the new thread as running. If the thread we just switched from is in the dying state, then it also frees the page that contained the dying thread's struct thread and stack. These couldn't be freed prior to the thread switch because the switch needed to use it. 

void
thread_schedule_tail (struct thread *prev)
{
  struct thread *cur = running_thread ();
  
  ASSERT (intr_get_level () == INTR_OFF);

  /* Mark us as running. */
  cur->status = THREAD_RUNNING;

  /* Start new time slice. */
  thread_ticks = 0;

#ifdef USERPROG
  /* Activate the new address space. */
  process_activate ();
#endif

  /* If the thread we switched from is dying, destroy its struct
     thread.  This must happen late so that thread_exit() doesn't
     pull out the rug under itself.  (We don't free
     initial_thread because its memory was not obtained via
     palloc().) */
  if (prev != NULL && prev->status == THREAD_DYING && prev != initial_thread) 
    {
      ASSERT (prev != cur);
      palloc_free_page (prev);
    }
}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
_________________________________________________________________________
## Source Files: (brief overview of files in the "src/threads" directory)
_________________________________________________________________________

loader.S
loader.h -> kernek loader. Assembles to 512 bytes of code and data that the PC BIOS loads into memory and which in turn finds the kernel on disk, loads it into memory, and jumps to start() in "start.S".

start.S -> Does basic setup needed for memory protection and 32-bit operation on 80x86 CPUs. Unlike the loader, this code is actually part of the kernel.

init.c
init.h -> Kernel initialization, including main(), the kernel's "main program." You should look over main() at least to see what gets initialized. You might want to add your own initialization code here.

thread.c
thread.h -> Basic thread support. Much of your work will take place in these files. "thread.h" defines struct thread, which you are likely to modify in all four projects. 

switch.S
switch.h -> Assembly language routine for switching threads.

interrupt.c
interrupt.h -> basic interrupt handling and functions for turning interrupts on and off.

synch.c
synch.h -> basic synchronization primitives: semaphores, locks, conditional variables and optimization barriers.

_________________________

basic threaded kernel also includes sm files in the "src/devices" directory

timer.c
timer.h -> System timer that ticks, by default, 100 times per second. You will modify this code in this project.

intq.c
intq.h -> interrupt queue, for managing a circular queue that both kernel threads and interrupt handlers want to access.

_________________________

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

___________________
## Synchronization
___________________


Proper synchronization is an important part of the solutions to these problems. Any synchronization problem can be easily solved by turning interrupts off: while interrupts are off, there is no concurrency, so there's no possibility for race conditions. Therefore, it's tempting to solve all synchronization problems this way, but don't. Instead, use semaphores, locks, and condition variables to solve the bulk of your synchronization problems. Read the tour section on synchronization (see section A.3 Synchronization) or the comments in "threads/synch.c" if you're unsure what synchronization primitives may be used in what situations. 

In the Pintos projects, the only class of problem best solved by disabling interrupts is coordinating data shared between a kernel thread and an interrupt handler. Because interrupt handlers can't sleep, they can't acquire locks. This means that data shared between kernel threads and an interrupt handler must be protected within a kernel thread by turning off interrupts. 

***This project only requires accessing a little bit of thread state from interrupt handlers. For the alarm clock, the timer interrupt needs to wake up sleeping threads.

When you do turn off interrupts, take care to do so for the least amount of code possible, or you can end up losing important things such as timer ticks or input events. Turning off interrupts also increases the interrupt handling latency, which can make a machine feel sluggish if taken too far. 

The synchronization primitives themselves in "synch.c" are implemented by disabling interrupts. You may need to increase the amount of code that runs with interrupts disabled here, but you should still try to keep it to a minimum. 


_________________________
## Priority Scheduling
_________________________

When a thread is added to the ready list that has a higher priority than the currently running thread, the current thread should immediately yield the processor to the new thread. Similarly, when threads are waiting for a lock, semaphore, or condition variable, the highest priority waiting thread should be awakened first. A thread may raise or lower its own priority at any time, but lowering its priority such that it no longer has the highest priority must cause it to immediately yield the CPU. 

The initial thread priority is passed as an argument to thread_create(). If there's no reason to choose another priority, use PRI_DEFAULT (31). The PRI_ macros are defined in "threads/thread.h", and you should not change their values. 

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

______________________________
#PART #3 => implementation
______________________________


1=> add the following line to "struct thread" in /src/threads/thread.h
	this variable to used to keep track of sleep ticks for each thread when we bloack a thread

//to track sleeping time
     int64_t sleepCounter;

2=> change function timer_sleep in /src/device/timer.c
	it was busy wait before. Wat we doing is setting sleepCounter of current thread to given ticks. disable interrupt , block the thread and enable interrupt. Base case : if ticks are <=0, jst return;

 //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  /* Sleeps for approximately TICKS timer ticks.  Interrupts must
     be turned on. */
  void
  timer_sleep (int64_t ticks)
  {
    if(ticks<=0)
            return;
  
    ASSERT (intr_get_level () == INTR_ON);
    thread_current()->sleepCounter=ticks; //set sleep time for current thread
  
    enum intr_level oldVal=intr_disable();
   //block this thread
   thread_block();
 
   intr_set_level(oldVal);
 }



3=> add below line in "timer_interrupt" function in src/devices/timer.c
	an interrupt is generated at every time tick. so timer_interrupt is invoked at every time tick. we r invoking decCounter function for each thread	

thread_foreach(decCounter,0); //wake a thread if there is one


4=> add below function in src/devices/timer.c above timer_interrupt function

 static void decCounter(struct thread *t, void *a)
 {
         if(t->status == THREAD_BLOCKED)
         {
                 if(t->sleepCounter>0)
                 {
                         t->sleepCounter--;
                         if(t->sleepCounter==0)
                                 thread_unblock(t);
                 }
         }
 }

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

*****************************************************
-> 4. Implementation of Priority Scheduling

Obj #1-> Implement priority scheduling for threads
Obj #2-> Understanding thread synchronization using semaphores in pintos

Have to mofify "thread_unblock" and "thread_yield" in thread.c
Have to keep ready_list sorted via priority

________
Obj #1 
________

Make the following changes in src/threads/thread.c

1=> add below code in thread_create() after "thread_unblock(t)
this preempts current thread if its priority is less than the newly created thread

if(t->priority > thread_current()->priority)
  {
    thread_yield();
  }


2=> modify next_thread_to_run() to this
this selects the top priority thread in the queue, rather than the thread at front (default)

static struct thread *
next_thread_to_run (void) 
{
  if (list_empty (&ready_list))
    return idle_thread;
  else
    {
    struct list_elem *e;
    struct list_elem *target=list_begin(&ready_list);
    int priority_max = -1;
    for(e=list_begin(&ready_list);e!=list_end(&ready_list);e=list_next(e))
    {
      struct thread *thrd = list_entry(e,struct thread, elem);
      if(thrd->priority > priority_max)
      {
        priority_max = thrd->priority;
        target = e;
      }
    }
    struct thread *thrd = list_entry(target,struct thread, elem);
    list_remove(target);
    return thrd;
  }

 //return list_entry (list_pop_front (&ready_list), struct thread, elem);
}


3=> modify thread_set_priority() to this
this will handle if the priority of current thread is modified while running

void
thread_set_priority (int new_priority) 
{

  //thread_current ()->priority = new_priority;

  if(thread_current ()->priority < new_priority)
  {
    thread_current ()->priority = new_priority;
    return; //if priority is incremented, dont care
  }


  //else if priority is decremented
  struct list_elem *e;
  struct thread *thrd;
  int max = -1;

  //set current threads priority
  thread_current ()->priority = new_priority;

  //iterate over ready queue and check if there is a thread with higher priority, if so yield
    for(e=list_begin(&ready_list);e!=list_end(&ready_list);e=list_next(e))
    {
      thrd=list_entry(e,struct thread, elem);

      if(thrd->priority > max)
      {
        max=thrd->priority;
      }
      
    }
    if(max > new_priority)
    {
	     thread_yield();
    }
}
 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

________
Obj #2
________

make the following changes in src/threads/synch.c

1=> modify sema_up() to this
this will signal high priority thread from sema waitlist, rather than first in list(default)

void
sema_up (struct semaphore *sema) 
{
  enum intr_level old_level;
  ASSERT (sema != NULL);
  old_level = intr_disable ();
  if (!list_empty (&sema->waiters))
  {
    struct thread *thrd;
    struct list_elem *e;
    struct list_elem *target = list_begin(&sema->waiters);
    int priority=-1;
    
    //iterate over the wait queue of sema and get the max priority thread
    for(e=list_begin(&sema->waiters);e!=list_end(&sema->waiters);e=list_next(e))
    {
    thrd = list_entry(e,struct thread, elem);
      if(thrd->priority > priority)
      {
        priority = thrd->priority;
        target=e;
      }
    }

    //remove it from list and unblock it
    thrd=list_entry(target,struct thread, elem);
    list_remove(target);
    thread_unblock(thrd);
  } 
  //thread_unblock (list_entry (list_pop_front (&sema->waiters),struct thread, elem));
  
  sema->value++;
  intr_set_level (old_level);
  thread_yield();
}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

